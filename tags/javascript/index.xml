<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on VickyLai.com</title>
    <link>https://vickylai.com/tags/javascript/</link>
    <description>Recent content in Javascript on VickyLai.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>hello@vickylai.com (Vicky Lai)</managingEditor>
    <webMaster>hello@vickylai.com (Vicky Lai)</webMaster>
    <lastBuildDate>Sat, 06 Jan 2018 20:00:28 -0500</lastBuildDate>
    
	<atom:link href="https://vickylai.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A unicode substitution cipher algorithm</title>
      <link>https://vickylai.com/verbose/unicode-cipher/</link>
      <pubDate>Sat, 06 Jan 2018 20:00:28 -0500</pubDate>
      <author>hello@vickylai.com (Vicky Lai)</author>
      <guid>https://vickylai.com/verbose/unicode-cipher/</guid>
      <description>Full transparency: I occasionally waste time messing around on Twitter. (Gasp! Shock!) One of the ways I waste time messing around on Twitter is by writing my name in my profile with different unicode character &amp;ldquo;fonts,&amp;rdquo; ùñëùñéùñêùñä ùñôùñçùñéùñò ùñîùñìùñä. I previously did this by searching for different unicode characters on Google, then one-by-one copying and pasting them into the &amp;ldquo;Name&amp;rdquo; field on my Twitter profile. Since this method of wasting time was a bit of a time waster, I decided (in true programmer fashion) to write a tool that would help me save some time while wasting it.</description>
    </item>
    
    <item>
      <title>Making sandwiches with closures in JavaScript</title>
      <link>https://vickylai.com/verbose/javascript-closures/</link>
      <pubDate>Sun, 28 May 2017 09:16:35 +0700</pubDate>
      <author>hello@vickylai.com (Vicky Lai)</author>
      <guid>https://vickylai.com/verbose/javascript-closures/</guid>
      <description>Say you&amp;rsquo;re having a little coding get-together, and you need some sandwiches. You happen to know that everyone prefers a different type of sandwich, like chicken, ham, or peanut butter and mayo. You could make all these sandwiches yourself, but that would be tedious and boring.
Luckily, you know of a nearby sandwich shop that delivers. They have the ability and ingredients to make any kind of sandwich in the world, and all you have to do is order through their app.</description>
    </item>
    
    <item>
      <title>Understanding Array.prototype.reduce() and recursion using apple pie</title>
      <link>https://vickylai.com/verbose/reduce-recursion-with-pie/</link>
      <pubDate>Thu, 18 May 2017 11:40:06 +0700</pubDate>
      <author>hello@vickylai.com (Vicky Lai)</author>
      <guid>https://vickylai.com/verbose/reduce-recursion-with-pie/</guid>
      <description>I was having trouble understanding reduce() and recursion in JavaScript, so I wrote this article to explain it to myself (hey, look, recursion!). I hope you find my examples both helpful and delicious.
Given an array with nested arrays:
var arr = [1, [2], [3, [[4]]]]  We want to produce this:
var flat = [1, 2, 3, 4]  Using for loops and if statements Naively, if we know the maximum number of nested arrays we&amp;rsquo;ll encounter (there are 4 in this example), we can use for loops to iterate through each array item, then if statements to check if each item is in itself an array, and so on&amp;hellip;</description>
    </item>
    
    <item>
      <title>Iterating over objects and arrays: frequent errors</title>
      <link>https://vickylai.com/verbose/iterating-objects-arrays/</link>
      <pubDate>Tue, 16 May 2017 10:46:46 +0700</pubDate>
      <author>hello@vickylai.com (Vicky Lai)</author>
      <guid>https://vickylai.com/verbose/iterating-objects-arrays/</guid>
      <description>Here&amp;rsquo;s some complaining a quick overview of some code that has confounded me more than once. I&amp;rsquo;m told even very experienced developers encounter these situations regularly, so if you find yourself on your third cup of coffee scratching your head over why your code is doing exactly what you told it to do (and not what you want it to do), maybe this post can help you.
The example code is JavaScript, since that&amp;rsquo;s what I&amp;rsquo;ve been working in lately, but I believe the concepts to be pretty universal.</description>
    </item>
    
  </channel>
</rss>